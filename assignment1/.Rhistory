TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t2_champ1id, champ2id = t2_champ2id, champ3id = t2_champ3id, champ4id = t2_champ4id, champ5id = t2_champ5id)
champWin <- bind_rows(team1Win, team2Win)
###Get frequency
champStats <- champWin %>%
group_by(champ1id, winner) %>%
tally() %>%
###Get the total number of games played for each character
group_by(champ1id) %>%
mutate(total = sum(n))%>%
###Get the winning percentage
mutate(percentage = n/total * 100) %>%
filter(winner == 1) %>%
mutate(totalMean = case_when(total>746 ~1,
total<=746~0,
TRUE ~2)) %>%
mutate_at(6, as.character)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = totalMean)) + geom_point()
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = total)) + geom_point(size = 6)  +
scale_colour_gradient(low = "white", high = "red")
team1Win <- myData %>%
###Get the players of the team and which team won for team 1
select(winner, t1_champ1id, t1_champ2id, t1_champ3id, t1_champ4id, t1_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 1,
winner == "team 2" ~ 0,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t1_champ1id, champ2id = t1_champ2id, champ3id = t1_champ3id, champ4id = t1_champ4id, champ5id = t1_champ5id)
team2Win <- myData %>%
###Get the players of the team and which team won for team 2
select(winner, t2_champ1id, t2_champ2id, t2_champ3id, t2_champ4id, t2_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 0,
winner == "team 2" ~ 1,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t2_champ1id, champ2id = t2_champ2id, champ3id = t2_champ3id, champ4id = t2_champ4id, champ5id = t2_champ5id)
champWin <- bind_rows(team1Win, team2Win)
###Get frequency
champStats <- champWin %>%
group_by(champ1id, winner) %>%
tally() %>%
###Get the total number of games played for each character
group_by(champ1id) %>%
mutate(total = sum(n))%>%
###Get the winning percentage
mutate(percentage = n/total * 100) %>%
filter(winner == 1) %>%
mutate(totalMean = case_when(total>746 ~1,
total<=746~0,
TRUE ~2)) %>%
mutate_at(6, as.character)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = totalMean)) + geom_point()
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = total)) + geom_point(size = 3)  +
scale_colour_gradient(low = "white", high = "red")
team1Win <- myData %>%
###Get the players of the team and which team won for team 1
select(winner, t1_champ1id, t1_champ2id, t1_champ3id, t1_champ4id, t1_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 1,
winner == "team 2" ~ 0,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t1_champ1id, champ2id = t1_champ2id, champ3id = t1_champ3id, champ4id = t1_champ4id, champ5id = t1_champ5id)
team2Win <- myData %>%
###Get the players of the team and which team won for team 2
select(winner, t2_champ1id, t2_champ2id, t2_champ3id, t2_champ4id, t2_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 0,
winner == "team 2" ~ 1,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t2_champ1id, champ2id = t2_champ2id, champ3id = t2_champ3id, champ4id = t2_champ4id, champ5id = t2_champ5id)
champWin <- bind_rows(team1Win, team2Win)
###Get frequency
champStats <- champWin %>%
group_by(champ1id, winner) %>%
tally() %>%
###Get the total number of games played for each character
group_by(champ1id) %>%
mutate(total = sum(n))%>%
###Get the winning percentage
mutate(percentage = n/total * 100) %>%
filter(winner == 1) %>%
mutate(totalMean = case_when(total>746 ~1,
total<=746~0,
TRUE ~2)) %>%
mutate_at(6, as.character)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = totalMean)) + geom_point()
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = total)) + geom_point(size = 4)  +
scale_colour_gradient(low = "blue", high = "red")
team1Win <- myData %>%
###Get the players of the team and which team won for team 1
select(winner, t1_champ1id, t1_champ2id, t1_champ3id, t1_champ4id, t1_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 1,
winner == "team 2" ~ 0,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t1_champ1id, champ2id = t1_champ2id, champ3id = t1_champ3id, champ4id = t1_champ4id, champ5id = t1_champ5id)
team2Win <- myData %>%
###Get the players of the team and which team won for team 2
select(winner, t2_champ1id, t2_champ2id, t2_champ3id, t2_champ4id, t2_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 0,
winner == "team 2" ~ 1,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t2_champ1id, champ2id = t2_champ2id, champ3id = t2_champ3id, champ4id = t2_champ4id, champ5id = t2_champ5id)
champWin <- bind_rows(team1Win, team2Win)
###Get frequency
champStats <- champWin %>%
group_by(champ1id, winner) %>%
tally() %>%
###Get the total number of games played for each character
group_by(champ1id) %>%
mutate(total = sum(n))%>%
###Get the winning percentage
mutate(percentage = n/total * 100) %>%
filter(winner == 1) %>%
mutate(totalMean = case_when(total>746 ~1,
total<=746~0,
TRUE ~2)) %>%
mutate_at(6, as.character)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = totalMean)) + geom_point(size = 3)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = total)) + geom_point(size = 4)  +
scale_colour_gradient(low = "blue", high = "red")
team1Win <- myData %>%
###Get the players of the team and which team won for team 1
select(winner, t1_champ1id, t1_champ2id, t1_champ3id, t1_champ4id, t1_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 1,
winner == "team 2" ~ 0,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t1_champ1id, champ2id = t1_champ2id, champ3id = t1_champ3id, champ4id = t1_champ4id, champ5id = t1_champ5id)
team2Win <- myData %>%
###Get the players of the team and which team won for team 2
select(winner, t2_champ1id, t2_champ2id, t2_champ3id, t2_champ4id, t2_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 0,
winner == "team 2" ~ 1,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t2_champ1id, champ2id = t2_champ2id, champ3id = t2_champ3id, champ4id = t2_champ4id, champ5id = t2_champ5id)
champWin <- bind_rows(team1Win, team2Win)
###Get frequency
champStats <- champWin %>%
group_by(champ1id, winner) %>%
tally() %>%
###Get the total number of games played for each character
group_by(champ1id) %>%
mutate(total = sum(n))%>%
###Get the winning percentage
mutate(percentage = n/total * 100) %>%
filter(winner == 1) %>%
mutate(totalMean = case_when(total>746 ~1,
total<=746~0,
TRUE ~2)) %>%
mutate_at(6, as.character)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = totalMean)) + geom_point(size = 3)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = total)) + geom_point(size = 4)  +
scale_colour_gradient(low = "blue", high = "red") + geom_point(aes(shape = totalMean))
team1Win <- myData %>%
###Get the players of the team and which team won for team 1
select(winner, t1_champ1id, t1_champ2id, t1_champ3id, t1_champ4id, t1_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 1,
winner == "team 2" ~ 0,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t1_champ1id, champ2id = t1_champ2id, champ3id = t1_champ3id, champ4id = t1_champ4id, champ5id = t1_champ5id)
team2Win <- myData %>%
###Get the players of the team and which team won for team 2
select(winner, t2_champ1id, t2_champ2id, t2_champ3id, t2_champ4id, t2_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 0,
winner == "team 2" ~ 1,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t2_champ1id, champ2id = t2_champ2id, champ3id = t2_champ3id, champ4id = t2_champ4id, champ5id = t2_champ5id)
champWin <- bind_rows(team1Win, team2Win)
###Get frequency
champStats <- champWin %>%
group_by(champ1id, winner) %>%
tally() %>%
###Get the total number of games played for each character
group_by(champ1id) %>%
mutate(total = sum(n))%>%
###Get the winning percentage
mutate(percentage = n/total * 100) %>%
filter(winner == 1) %>%
mutate(totalMean = case_when(total>746 ~1,
total<=746~0,
TRUE ~2)) %>%
mutate_at(6, as.character)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = totalMean)) + geom_point(size = 3)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = total)) + geom_point(aes(shape = totalMean,size = 4))  +
scale_colour_gradient(low = "blue", high = "red")
team1Win <- myData %>%
###Get the players of the team and which team won for team 1
select(winner, t1_champ1id, t1_champ2id, t1_champ3id, t1_champ4id, t1_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 1,
winner == "team 2" ~ 0,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t1_champ1id, champ2id = t1_champ2id, champ3id = t1_champ3id, champ4id = t1_champ4id, champ5id = t1_champ5id)
team2Win <- myData %>%
###Get the players of the team and which team won for team 2
select(winner, t2_champ1id, t2_champ2id, t2_champ3id, t2_champ4id, t2_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 0,
winner == "team 2" ~ 1,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t2_champ1id, champ2id = t2_champ2id, champ3id = t2_champ3id, champ4id = t2_champ4id, champ5id = t2_champ5id)
champWin <- bind_rows(team1Win, team2Win)
###Get frequency
champStats <- champWin %>%
group_by(champ1id, winner) %>%
tally() %>%
###Get the total number of games played for each character
group_by(champ1id) %>%
mutate(total = sum(n))%>%
###Get the winning percentage
mutate(percentage = n/total * 100) %>%
filter(winner == 1) %>%
mutate(totalMean = case_when(total>746 ~1,
total<=746~0,
TRUE ~2)) %>%
mutate_at(6, as.character)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = totalMean)) + geom_point(size = 3)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = total)) + geom_point(shape = totalMean,size = 4)  +
scale_colour_gradient(low = "blue", high = "red")
team1Win <- myData %>%
###Get the players of the team and which team won for team 1
select(winner, t1_champ1id, t1_champ2id, t1_champ3id, t1_champ4id, t1_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 1,
winner == "team 2" ~ 0,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t1_champ1id, champ2id = t1_champ2id, champ3id = t1_champ3id, champ4id = t1_champ4id, champ5id = t1_champ5id)
team2Win <- myData %>%
###Get the players of the team and which team won for team 2
select(winner, t2_champ1id, t2_champ2id, t2_champ3id, t2_champ4id, t2_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 0,
winner == "team 2" ~ 1,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t2_champ1id, champ2id = t2_champ2id, champ3id = t2_champ3id, champ4id = t2_champ4id, champ5id = t2_champ5id)
champWin <- bind_rows(team1Win, team2Win)
###Get frequency
champStats <- champWin %>%
group_by(champ1id, winner) %>%
tally() %>%
###Get the total number of games played for each character
group_by(champ1id) %>%
mutate(total = sum(n))%>%
###Get the winning percentage
mutate(percentage = n/total * 100) %>%
filter(winner == 1) %>%
mutate(totalMean = case_when(total>746 ~1,
total<=746~0,
TRUE ~2)) %>%
mutate_at(6, as.character)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = totalMean)) + geom_point(size = 3)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = total)) + geom_point(aes(shape = totalMean,size = 4))  +
scale_colour_gradient(low = "blue", high = "red")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(nnet)
library(caTools)
library(caret)
library(corrplot)
myData <- read.csv("games.csv")
head(myData)
myData <- read.csv("games.csv")
head(myData)
###Converting the variables into the right types
myData <- myData %>% mutate_at(vars(4:ncol(myData)), as.character)
###Replace 1 and 2 with team 1 and team 2
myData <- myData %>% mutate(winner = replace(winner, winner ==1,"team 1"),
firstBlood = replace(firstBlood, firstBlood ==1,"team 1"),
firstTower = replace(firstTower, firstTower ==1,"team 1"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==1,"team 1"),
firstBaron = replace(firstBaron, firstBaron ==1,"team 1"),
firstDragon = replace(firstDragon, firstDragon ==1,"team 1"),
winner = replace(winner, winner ==2,"team 2"),
firstBlood = replace(firstBlood, firstBlood ==2,"team 2"),
firstTower = replace(firstTower, firstTower ==2,"team 2"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==2,"team 2"),
firstBaron = replace(firstBaron, firstBaron ==2,"team 2"),
firstDragon = replace(firstDragon, firstDragon ==2,"team 2"))
###Dropping unncessary column(s)
myData <- myData %>% select(-c(2, 4, 13, 14, 16, 17, 19, 20, 22, 23, 25, 26, 31:36, 38, 39, 41, 42, 44, 45, 47, 48, 50, 51, 56:61))
head(myData)
ggplot(data = myData, aes(x = winner, fill = winner)) +
geom_bar() +
scale_fill_manual(values=c("blue", "red"))
winners <- myData %>%
count(winner) %>%
mutate(winPercentage = prop.table(n))
winners
ggplot(data = myData, aes(x = firstTower, fill = winner)) +
geom_bar() +
scale_fill_manual(values=c("blue", "red"))
team1Win <- myData %>%
###Get the players of the team and which team won for team 1
select(winner, t1_champ1id, t1_champ2id, t1_champ3id, t1_champ4id, t1_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 1,
winner == "team 2" ~ 0,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t1_champ1id, champ2id = t1_champ2id, champ3id = t1_champ3id, champ4id = t1_champ4id, champ5id = t1_champ5id)
team2Win <- myData %>%
###Get the players of the team and which team won for team 2
select(winner, t2_champ1id, t2_champ2id, t2_champ3id, t2_champ4id, t2_champ5id) %>%
###Change the variable to whether the team won or lost
mutate(winner = case_when(winner == "team 1"~ 0,
winner == "team 2" ~ 1,
TRUE ~ 2)) %>%
###Rename the variables so we can combine rows later
rename(champ1id = t2_champ1id, champ2id = t2_champ2id, champ3id = t2_champ3id, champ4id = t2_champ4id, champ5id = t2_champ5id)
champWin <- bind_rows(team1Win, team2Win)
###Get frequency
champStats <- champWin %>%
group_by(champ1id, winner) %>%
tally() %>%
###Get the total number of games played for each character
group_by(champ1id) %>%
mutate(total = sum(n))%>%
###Get the winning percentage
mutate(percentage = n/total * 100) %>%
filter(winner == 1) %>%
mutate(totalMean = case_when(total>746 ~1,
total<=746~0,
TRUE ~2)) %>%
mutate_at(6, as.character)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = totalMean)) + geom_point(size = 3)
ggplot(data = champStats, aes(x = champ1id, y = percentage, colour = total)) + geom_point(aes(shape = totalMean,size = 4))  +
scale_colour_gradient(low = "blue", high = "red")
ggplot(data = myData, aes(x = firstBlood, fill = winner)) +
geom_bar() +
scale_fill_manual(values=c("blue", "red"))
correlation <- chisq.test(myData$winner, myData$firstBlood)
correlation
ggplot(myData, aes(x =gameDuration, y = t1_baronKills , colour = winner)) +geom_jitter() +
scale_color_manual(values=c("blue", "red"))
ggplot(myData, aes(x =gameDuration, y = t2_baronKills , colour = winner)) +geom_jitter() +
scale_color_manual(values=c("blue", "red"))
myData <- read.csv("games.csv")
head(myData)
###Converting the variables into the right types
myData <- myData %>% mutate_at(vars(4:ncol(myData)), as.character)
###Replace 1 and 2 with team 1 and team 2
myData <- myData %>% mutate(winner = replace(winner, winner ==1,"team 1"),
firstBlood = replace(firstBlood, firstBlood ==1,"team 1"),
firstTower = replace(firstTower, firstTower ==1,"team 1"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==1,"team 1"),
firstBaron = replace(firstBaron, firstBaron ==1,"team 1"),
firstDragon = replace(firstDragon, firstDragon ==1,"team 1"),
winner = replace(winner, winner ==2,"team 2"),
firstBlood = replace(firstBlood, firstBlood ==2,"team 2"),
firstTower = replace(firstTower, firstTower ==2,"team 2"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==2,"team 2"),
firstBaron = replace(firstBaron, firstBaron ==2,"team 2"),
firstDragon = replace(firstDragon, firstDragon ==2,"team 2"))
###Dropping unncessary column(s)
myData <- myData %>% select(-2)
head(myData)
###Converting the variables into the right types
myData <- myData %>% mutate_at(vars(4:ncol(myData)), as.character)
###Replace 1 and 2 with team 1 and team 2
myData <- myData %>% mutate(winner = replace(winner, winner ==1,"team 1"),
firstBlood = replace(firstBlood, firstBlood ==1,"team 1"),
firstTower = replace(firstTower, firstTower ==1,"team 1"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==1,"team 1"),
firstBaron = replace(firstBaron, firstBaron ==1,"team 1"),
firstDragon = replace(firstDragon, firstDragon ==1,"team 1"),
winner = replace(winner, winner ==2,"team 2"),
firstBlood = replace(firstBlood, firstBlood ==2,"team 2"),
firstTower = replace(firstTower, firstTower ==2,"team 2"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==2,"team 2"),
firstBaron = replace(firstBaron, firstBaron ==2,"team 2"),
firstDragon = replace(firstDragon, firstDragon ==2,"team 2"))
###Dropping unncessary column(s)
myData <- myData %>% select(-2)
head(myData)
myData <- read.csv("games.csv")
head(myData)
summarY(myData)
summary(myData)
library(tidyverse)
library(ggplot2)
library(nnet)
library(caTools)
library(caret)
library(corrplot)
myData <- read.csv("games.csv")
head(myData)
myData <- read.csv("games.csv")
head(myData)
###Converting the variables into the right types
myData <- myData %>% mutate_at(vars(4:ncol(myData)), as.character)
###Replace 1 and 2 with team 1 and team 2
myData <- myData %>% mutate(winner = replace(winner, winner ==1,"team 1"),
firstBlood = replace(firstBlood, firstBlood ==1,"team 1"),
firstTower = replace(firstTower, firstTower ==1,"team 1"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==1,"team 1"),
firstBaron = replace(firstBaron, firstBaron ==1,"team 1"),
firstDragon = replace(firstDragon, firstDragon ==1,"team 1"),
winner = replace(winner, winner ==2,"team 2"),
firstBlood = replace(firstBlood, firstBlood ==2,"team 2"),
firstTower = replace(firstTower, firstTower ==2,"team 2"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==2,"team 2"),
firstBaron = replace(firstBaron, firstBaron ==2,"team 2"),
firstDragon = replace(firstDragon, firstDragon ==2,"team 2"))
###Dropping unncessary column(s)
#myData <- myData %>% select(-2)
head(myData)
colnames(mydata)
colnames(myData)
###Converting the variables into the right types
myData <- myData %>% mutate_at(vars(1, 4:26, 32:51, 57:61), as.character)
###Replace 1 and 2 with team 1 and team 2
myData <- myData %>% mutate(winner = replace(winner, winner ==1,"team 1"),
firstBlood = replace(firstBlood, firstBlood ==1,"team 1"),
firstTower = replace(firstTower, firstTower ==1,"team 1"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==1,"team 1"),
firstBaron = replace(firstBaron, firstBaron ==1,"team 1"),
firstDragon = replace(firstDragon, firstDragon ==1,"team 1"),
winner = replace(winner, winner ==2,"team 2"),
firstBlood = replace(firstBlood, firstBlood ==2,"team 2"),
firstTower = replace(firstTower, firstTower ==2,"team 2"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==2,"team 2"),
firstBaron = replace(firstBaron, firstBaron ==2,"team 2"),
firstDragon = replace(firstDragon, firstDragon ==2,"team 2"))
###Dropping unncessary column(s)
myData <- myData %>% select(-2)
head(myData)
summary(myData)
myData <- read.csv("games.csv")
head(myData)
###Converting the variables into the right types
myData <- myData %>% mutate_at(vars(1, 4:26, 32:51, 57:61), as.factor)
###Replace 1 and 2 with team 1 and team 2
myData <- myData %>% mutate(winner = replace(winner, winner ==1,"team 1"),
firstBlood = replace(firstBlood, firstBlood ==1,"team 1"),
firstTower = replace(firstTower, firstTower ==1,"team 1"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==1,"team 1"),
firstBaron = replace(firstBaron, firstBaron ==1,"team 1"),
firstDragon = replace(firstDragon, firstDragon ==1,"team 1"),
winner = replace(winner, winner ==2,"team 2"),
firstBlood = replace(firstBlood, firstBlood ==2,"team 2"),
firstTower = replace(firstTower, firstTower ==2,"team 2"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==2,"team 2"),
firstBaron = replace(firstBaron, firstBaron ==2,"team 2"),
firstDragon = replace(firstDragon, firstDragon ==2,"team 2"))
###Dropping unncessary column(s)
myData <- myData %>% select(-2)
head(myData)
###Converting the variables into the right types
myData <- myData %>% mutate_at(vars(1, 4:26, 32:51, 57:61), as.character)
myData <- read.csv("games.csv")
head(myData)
###Converting the variables into the right types
myData <- myData %>% mutate_at(vars(1, 4:26, 32:51, 57:61), as.character)
###Replace 1 and 2 with team 1 and team 2
myData <- myData %>% mutate(winner = replace(winner, winner ==1,"team 1"),
firstBlood = replace(firstBlood, firstBlood ==1,"team 1"),
firstTower = replace(firstTower, firstTower ==1,"team 1"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==1,"team 1"),
firstBaron = replace(firstBaron, firstBaron ==1,"team 1"),
firstDragon = replace(firstDragon, firstDragon ==1,"team 1"),
winner = replace(winner, winner ==2,"team 2"),
firstBlood = replace(firstBlood, firstBlood ==2,"team 2"),
firstTower = replace(firstTower, firstTower ==2,"team 2"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==2,"team 2"),
firstBaron = replace(firstBaron, firstBaron ==2,"team 2"),
firstDragon = replace(firstDragon, firstDragon ==2,"team 2"))
###Dropping unncessary column(s)
myData <- myData %>% select(-2)
head(myData)
myData <- read.csv("games.csv")
head(myData)
###Converting the variables into the right types
myData <- myData %>% mutate_at(vars(1, 4:26, 32:51, 57:61), as.character)
###Replace 1 and 2 with team 1 and team 2
myData <- myData %>% mutate(winner = replace(winner, winner ==1,"team 1"),
firstBlood = replace(firstBlood, firstBlood ==1,"team 1"),
firstTower = replace(firstTower, firstTower ==1,"team 1"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==1,"team 1"),
firstBaron = replace(firstBaron, firstBaron ==1,"team 1"),
firstDragon = replace(firstDragon, firstDragon ==1,"team 1"),
winner = replace(winner, winner ==2,"team 2"),
firstBlood = replace(firstBlood, firstBlood ==2,"team 2"),
firstTower = replace(firstTower, firstTower ==2,"team 2"),
firstInhibitor = replace(firstInhibitor, firstInhibitor ==2,"team 2"),
firstBaron = replace(firstBaron, firstBaron ==2,"team 2"),
firstDragon = replace(firstDragon, firstDragon ==2,"team 2")) %>%
mutate_at(vars(1, 4:26, 32:51, 57:61), as.factor)
###Dropping unncessary column(s)
myData <- myData %>% select(-2)
head(myData)
summary(myData)
